// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  // NOTE: When using postgresql, mysql or sqlserver, uncomment the @db.Text annotations in model Account below
  // Further reading:
  // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
  // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
  url      = env("DATABASE_URL")
}

// Necessary for Next auth
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? // @db.Text
  access_token      String? // @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? // @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String         @id @default(cuid())
  name          String?
  email         String?        @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  MovieLists    MovieList[]
  ListComments  ListComment[]
  MovieComment  MovieComment[]
  Votes         Votes[]
  Reader        Reader[]
  Editor        Editor[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model MovieList {
  id         String        @id @default(cuid())
  createdAt  DateTime      @default(now())
  lastEdited DateTime      @updatedAt
  public     Boolean
  author     User          @relation(fields: [userId], references: [id])
  comments   ListComment[]
  userId     String
  movies     Movie[]
  votes      Votes[]
  reader     Reader?       @relation(fields: [readerId], references: [id])
  readerId   String?
  Editor     Editor?       @relation(fields: [editorId], references: [id])
  editorId   String?
}

model Reader {
  id         String      @id @default(cuid())
  movieLists MovieList[]
  reader     User        @relation(fields: [userId], references: [id])
  userId     String
}

model Editor {
  id         String      @id @default(cuid())
  movieLists MovieList[]
  editor     User        @relation(fields: [userId], references: [id])
  userId     String
}

model Movie {
  id          String         @id @default(cuid())
  createdAt   DateTime       @default(now())
  movieDbId   String
  movieList   MovieList      @relation(fields: [movieListId], references: [id])
  comments    MovieComment[]
  movieListId String
}

model ListComment {
  id          String    @id @default(cuid())
  createdAt   DateTime  @default(now())
  lastEdited  DateTime  @updatedAt()
  body        String
  author      User      @relation(fields: [userId], references: [id])
  movieList   MovieList @relation(fields: [movieListId], references: [id])
  userId      String
  movieListId String
  Votes       Votes[]
}

model MovieComment {
  id         String   @id @default(cuid())
  createdAt  DateTime @default(now())
  lastEdited DateTime @updatedAt()
  body       String
  author     User     @relation(fields: [userId], references: [id])
  movie      Movie    @relation(fields: [movieId], references: [id])

  userId  String
  movieId String
  Votes   Votes[]
}

model Votes {
  id             String        @id @default(cuid())
  upOrDown       Int           @db.SmallInt
  user           User          @relation(fields: [userId], references: [id])
  movieList      MovieList?    @relation(fields: [movieListId], references: [id])
  listComment    ListComment?  @relation(fields: [listCommentsId], references: [id])
  movieComment   MovieComment? @relation(fields: [movieCommentId], references: [id])
  created        DateTime      @default(now())
  updated        DateTime      @updatedAt
  userId         String
  movieListId    String
  listCommentsId String
  movieCommentId String
}
